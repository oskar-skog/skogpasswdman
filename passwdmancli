#!/usr/bin/python
# -*- encoding: utf-8 -*-

copywrong = (
"""#Copyright (c) 2013, 2014, Oskar Skog <oskar.skog.finland@gmail.com>
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions are met:
#
#1.  Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#2.  Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#POSSIBILITY OF SUCH DAMAGE.
""")

import passwdmanapi as api
import sys
import logging
import time
import os
import os.path
import getopt
import shutil
import unicodedata
import traceback
import re
import pdb

__doc__ = """The functions show_help(), passwd_help(), honeypot_help(),
bells_and_whistles() and bugs() takes no arguments and prints their
__doc__-string to standard output.
See passwdmancli(1) to understand the interface.
Some global stuff:
    import passwdmanapi as api
    p, h = api.passwd(), api.honeypot()
    verbose             verbose mode (command) (bool)
    interactive         interactive mode (command line flag) (bool)
    main()
    se()                complain about syntax errors
    err(x)              sow("!" + x + "\\n")
    sow(x)              print x to stdout
    siw()               read line from stdin
    theline             set by main() and used by se(), the line that might
                            cause a syntax error
    passwd_cmds()
    honeypot_cmds()
 """

def se():
    """se() - syntax error
    Show error message containing global variable `theline`.
    """
    sow(api.u("!syntax error, type 'help'\n!{0}\n").format(api.u(theline)))
    if not interactive:
        sys.exit(1)

def err(x):
    """err(x) - error messages
    Complain about `x`.
    It prepends an exclamation mark and appends a newline.
    Program dies if not in interactive mode.
    """
    # Prepend a newline to skip partial output.
    sow("\n!")
    sow(x)
    sow("\n")
    if not interactive:
        sys.exit(1)

def sow(x):             # Do the Unicode-stuff here.
    """sow(x) - Write to stdout."""
    sys.stdout.write(api.b2u3(x))

def siw():
    """siw() - Read from infile. It returns a unicode-string"""
    global infile
    return api.u(infile.readline())

def v(x):       # Verbose.
    """def v(x):
    global verbose
    if verbose:
        sow("#" + x + "\n")
"""
    if verbose:
        sow(api.u('#{0}\n').format(api.u(x)))     # Make the output comments.

def escape(s):
    '''escape(s)
    Return `s` with all single-quotes backslash escaped.
    '''
    return api.u(re.sub("(')", r'\\\1', s))

def show_help():
    """#HELP MESSAGE
#passwdmancli uses colon separated fields as input.  Everything inside angle
#brackets <>, is intended to be expanded in your brain.
#It tries to be more grepable by making the first letter in error messages be
#an exclamation mark and the first letter in human-friendly messages be a
#hash/number sign.  Multi-line outputs are terminated by a "#DONE"
#message.  Unless otherwise noted, quotes around angle brackets are optional
#and may be either single quotes or double quotes. If the first letter in its
#input is a '#', it will ignore the line. If the first letter in it input is
# '|', it prints out the rest of the line
#It allows ANY crap to surround the commands in the fields.
#It's outputs are prepended with `<command> | tr : .` + '?'
#The error messages are hopefully obvious enough.
#passwd:help    Show help for passwd:*
#honeypot:help  Show help for honeypot:*
#verbose:on     Verbose output, the command 'hell' does the same thing.
#verbose:off    Brief output.
#undo           Undo last change to passwd or honeypot, there is also 'redo'.
#help           Obvious.        pb:on           ``progress-bars`'
#exit           Obvious.        pb:off          Off by default.
#bugs           Bugs.
#whistles       Bells and whistles.
"""
    sow(show_help.__doc__)

def passwd_help():      #22 lines + ('#READY') + new line for input
    """#HELP MESSAGE
#Do you remember the angle brackets and the quotes? If not: type 'help'
#passwd:add:<type>:<min>:<max>:"<name>"         Add password, for <name> with
#                       a minimal length of <min> and maximal length of <max>
#                       <type> == 10 = use digits only, <type> == 64 = use
#                       big and small letters, digits, '!' and '_'.
#passwd:add_human:"<name>"                      Add human generated password
#                       for <name>. The password is entered on a new line.
#passwd:remove:<index>                          Remove, by index.
#passwd:remove:"<name>"                         Remove, by name.
#passwd:get:<index>     passwd:get:"<name>"     Get password.
#passwd:meta:<index>                            Get meta-data, which is...
#passwd:meta:"<name>"                           ...useful when updating.
#passwd:remove:<index>          passwd:remove:"<name>"       remove password
#passwd:list                              list all passwords (index and name)
#passwd:update:"<name>"         passwd:update:<index>   update password, will
#                       print out the new and the old.
#passwd:update_meta:<type>:<min>:<max>:"<name>"      Update the password,...
#passwd:update_meta:<type>:<min>:<max>:<index>       ...but use new meta-data
#                                       (the <type>, <min> and <max>)
#               passwd:update      reuses the existing meta-data
#
"""
    sow(passwd_help.__doc__)

def honeypot_help():
    """#HELP MESSAGE
#Do you remember the angle brackets and the quotes? If not: type 'help'
#The honey pots are human generated  passwords, whose only purposes are to be
#used as traps.
#honeypot:add:"<value>"                 Add a new honey pot.
#honeypot:pick                          Pick a random honeypot.
#honeypot:pick:<n>:"<sep>"              Pick <n> random honeypots use <sep>
#                                       as a separator between them.
#honeypot:pickl:<n>                     "honeypot.pickl?'one','two','three'"
#                                       "\'" is an escape for "'".
#honeypot:remove:"<value>"              Remove.
#honeypot:list                          List.
#
#
#
#
#
#
#
#
#
#
"""
    sow(honeypot_help.__doc__)

def bells_and_whistles():
    """#BELLS AND WHISTLES
#       *       Comments:       It ignores input-lines that begins with a '#'
#
#       *       Pipe-through:   If it's input begins with a '|', the rest of
#               the line is written to stdout.
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
"""
    sow(bells_and_whistles.__doc__)

def bugs():
    """#BUGS
#If verbose mode is enabled, it will shout '#READY' to stdout way too much.
#
#
#
#It is noisy and babbles too much.
#It uses the following methods to parse it's input:
#       int()           python built-in
#       'if "keyword" in some_variable:'
#Some of these big message screens looks ugly.
#Bad speling in the error messages.
#
#
#
#
#
#
#
#
#
#
#
"""
    sow(bugs.__doc__)

def cli_progress(percent, data):
    '''cli_progress(percent, data)
    
    Called from a `progress_bar`-object.'''
    for x in range(data['key']):
        sow('\b')
    s = '{0}%'.format(int(percent))
    sow(s)
    sys.stdout.flush()
    data['key'] = len(s)

def mk_pb():
    '''mk_pb()
    Make progress_bar.
    Return a `progress_bar`-object.
    
    '#\t0%\b\b1%\b\b2%\b\b33%\b\b\b100%\n'
    '''
    if progress_bars:
        data = {'key': 2}
        sow('#\t0%')
        sys.stdout.flush()
        return api.progress_bar(1.0, 100.0, cli_progress, data=data)
    else:
        return api.no_pb()

def pb_nl():
    '''pb_nl()
    Print the trailing newline. for the progress-counter.
    '''
    if progress_bars:
        sow('\n')

def parse(line, data):
    '''parse(line, data)
    
    Define commands and their arguments in `data`.
    `line` is the command **fragment**.
        Never a newline.
        'passwd:' and 'honeypot': are cut off.
    
    `data` is a list of dicts.
    
    data = {
        'command':              Command name.
        'args':                 List of dicts.
        'code':                 execable object
    }
    
    arg = {
        'name':                 Name of the variable.
        'type':                 int (anywhere), lit_str, str
                                    (once and only in the end)
    }
    
    The arguments sent to the code are stored in the dict `args`.
    
    '''
    # Validate.
    try:
        for x in data:
            try:
                x['command']
                x['args']
                x['code']
            except KeyError as k:
                raise api.err_idiot("Required key '{0}' missing.".format(k))
            for y in x:
                if y not in ('command', 'args', 'code'):
                    raise api.err_idiot("Unknown key '{0}'.".format(y))
            if x['args']:
                for y in x['args'][:-1]:
                    try:
                        forget = y['type']
                        if forget in ('str', 'lit_str'):
                            raise api.err_idiot("str-argument too early")
                        y['name']
                    except KeyError as k:
                        raise api.err_idiot(
                                    "Required key '{0}' missing.".format(k))
                try:
                    x['args'][-1]['type']
                    x['args'][-1]['name']
                except KeyError as k:
                    raise api.err_idiot(
                                    "Required key '{0}' missing.".format(k))
    except api.err_idiot as complaint:
        assert False, "data does not validate! {0}".format(complaint)
    
    # Internal use only keys in the data-dicts:
    #   com-pri         Increased if the command would match another.
    #                           ex. Run 'pick' code instead of 'pickl'
    #                           pick will get a higher nice.
    #   arg-pri         The same command can be defined multiple times,
    #                           if they take a different number of
    #                           arguments.
    
    # Begin with setting them all to zero.
    for x in data:
        x['com-pri'] = 0
        x['arg-pri'] = 0
    
    # Prioritize command.
    for x in data:
        for y in data:
            if x['command'] in y['command']:
                x['com-pri'] += 1
                # DO NOT BREAK; Think about ("hell", "hello", "hello-world").
    # Prioritize arguments.
    for x in data:
        if x['args']:
            if x['args'][-1]['type'] == 'int':
                n = len(x['args'])
            else:
                n = len(x['args']) - 1
        else:
            n = 0
        x['arg-pri'] = n
    # Their arguments priority.
    data.sort(reverse=True, key=lambda d: d['arg-pri'])
    # Their commands priority.
    data.sort(key=lambda d: d['com-pri'])
    
    
    final = data
    # Unicode.
    for x in final:
        x['command'] = api.u(x['command'])
    
    been_there = ''
    tmp = line.split(':', 1)
    cmd_part = tmp[0]
    try:
        arg_part = tmp[1]
    except IndexError:
        arg_part = ''
    while final:
        try_with = final.pop(0)
        if try_with['command'] in cmd_part:
            if been_there:
                if been_there != try_with['command']:
                    # Don't run code for 'hell' when the command was 'hello'.
                    # If this happens then there are no 'hello' commands left.
                    break
            else:
                been_there = try_with['command']
            # Read arguments.
            args = {}
            if len(try_with['args']):
                arg_list = arg_part.split(':', len(try_with['args']) - 1)
            else:
                arg_list = []
            for src_arg, dst_arg in enumerate(try_with['args']):
                if dst_arg['type'] == 'int':
                    try:
                        args[dst_arg['name']] = int(arg_list[src_arg])
                    except ValueError:
                        # This will make it skip to the next command
                        # with the same name.
                        break
                elif dst_arg['type'] == 'str':
                    args[dst_arg['name']] = api.unquote(arg_list[src_arg])
                elif dst_arg['type'] == 'lit_str':
                    args[dst_arg['name']] = arg_list[src_arg]
                else:
                    assert False, "Unknown type."
            else:
                # The arguments have been parsed successfully.
                exec(try_with['code'])
                return
            # Loop.
    
    # Nothing was successful.
    se()
    
def passwd_update_meta(x):
    """passwd_update_meta(x) - Update the password x with new meta-data.
    Variant of passwd_update().
    passwd:update_meta:<type>:<min>:<max>:<name_or_index>
    """
    fields = x.split(':', 3)
    if len(fields) < 4: #It takes 4 arguments.
        se() #Syntax error.
        return
    name = api.unquote(fields[3])
    try:
        index = p.mkindex(name)     # Where is it?
    except:
        err("not found")
        return
    old = p[index]["value"]             # Remember old.
    v("This may take a while.")
    try:
        p.update_meta(index, fields[0], fields[1], fields[2], pb=mk_pb())
    except api.err_idiot:       # Incorrect usage.
        err("stupid arguments")
        return
    pb_nl()
    new = p[index]["value"]
    sow(api.u("#old:new\npasswd.update?'{0}':'{1}'\n").format(
                                            api.u(escape(old)), api.u(new)))
    
def passwd_add(x):
    """passwd_add(x) - generate and add a new password.
    Name xor index.
    passwd:add:<type>:<min>:<max>:<name>
    """
    parse(x, [
        {
            'command': 'human',
            'args': [],
            'code': '''err("Use 'passwd:add_human'.")'''
        }, {
            'command': '10',
            'args': [{
                'type': 'int',
                'name': 'minlen'
            }, {
                'type': 'int',
                'name': 'maxlen'
            }, {
                'type': 'str',
                'name': 'name'
            }],
            'code': r'''
try:
    p.add(args['name'], None, "10", str(args['minlen']), str(args['maxlen']),
                                                                pb=mk_pb())
    pb_nl()
    v('Added base10 password.')
except api.err_duplicate:
    err('duplicate')
'''
        }, {
            'command': '64',
            'args': [{
                'type': 'int',
                'name': 'minlen'
            }, {
                'type': 'int',
                'name': 'maxlen'
            }, {
                'type': 'str',
                'name': 'name'
            }],
            'code': r'''
try:
    p.add(args['name'], None, "64", str(args['minlen']), str(args['maxlen']),
                                                                pb=mk_pb())
    pb_nl()
    v('Added base64 password.')
except api.err_duplicate:
    err('duplicate')
'''
    }])

def passwd_cmds(x):
    """passwd_cmds(x) - handle all "passwd:*".
    x is the line with ^'passwd:' and newline$ removed.
    passwd_update_meta()
    passwd_add()
    """
    parse(x, [
        {
            'command': 'list',
            'args': [],
            'code': r'''
sow("#\t\tindex:\tname\n")
for i, L in enumerate(p):
    sow(api.u("passwd.list?\t{0}:\t'{1}'\n").format(i, L['name']))
sow("#DONE\n#READY\n")
'''
        }, {
            'command': 'help',
            'args': [],
            'code': 'passwd_help()'
        }, {
            'command': 'add_human',
            'args': [{
                'type': 'str',
                'name': 'name'
            }],
            'code': r'''
s = siw()
try:
    int(args['name'])
    sow("#WARNING: ITS NAME WILL BE BELIEVED TO BE AN INDEX!\n")
    sow("#IF YOU REMOVE IT BY ITS NAME, BAD THINGS CAN HAPPEN!\n")
except:
    pass
try:
    p.add_nometa(args['name'], s[:-1])
    v("Added human generated password.")
except api.err_duplicate:
    err("duplicate")
'''
        }, {
            'command': 'add',
            'args': [{
                'type': 'lit_str',
                'name': 'cmd'
            }],
            'code': 'passwd_add(args["cmd"])'
        }, {
            'command' : 'get',
            'args': [{
                'type': 'str',
                'name': 'name'
            }],
            'code': r'''
try:
    the_value = p[p.mkindex(args['name'])]["value"]
    sow(api.u("passwd.get?'{0}'\n").format(api.u(escape(the_value))))
except api.err_notfound:
    err("not found")
'''
        }, {
            'command': 'update',
            'args': [{
                'type': 'str',
                'name': 'name'
            }],
            'code': r'''
try:
    v("This may take a while.")
    index = p.mkindex(args['name'])
    old = p[index]["value"]
    p.update(index, pb=mk_pb())
    pb_nl()
    new = p[index]["value"]
    sow("#old:new\npasswd.update?'{0}':'{1}'\n".format(old, new))
except api.err_nometa:
    err("no meta")
except api.err_notfound:
    err("not found")
'''
        }, {
            'command': 'update_meta',
            'args': [{
                'type': 'lit_str',
                'name': 'cmd'
            }],
            'code': 'passwd_update_meta(args["cmd"])'
        }, {
            'command': 'meta',
            'args': [{
                'type': 'str',
                'name': 'name'
            }],
            'code': r'''
try:                #Get meta-data for a password.
    metadata = p[p.mkindex(args['name'])]["meta"]
    sow("#\t\ttype:\tminlength:\tmaxlength\n")      #safe
    sow("passwd.meta?\t'{0}':\t'{1}':\t\t'{2}'\n".format(metadata["type"],
                                                metadata["minlength"],
                                                 metadata["maxlength"]))
except:
    err("no meta")
'''
        }, {
            'command': 'remove',
            'args': [{
                'type': 'str',
                'name': 'name'
            }],
            'code': r'''
try:
    p.remove(args['name'])
except api.err_notfound:
    err("not found")
'''
    }])

def honeypot_cmds(x):
    """honeypots_cmds(x) - handle all "honeypot:*".
    x is the line with ^'honeypot:' and newline$ removed.
    """
    parse(x, [
        {
            'command': 'list',
            'args': [],
            'code': r'''
sow("#\t\tindex:\tname\n")
for index, value in enumerate(h):
   sow(api.u("honeypot.list?\t{0}:\t'{1}'\n").format(index, escape(value)))
sow("#DONE\n#READY\n")
'''
        }, {
            'command': 'help',
            'args': [],
            'code': 'honeypot_help()'
        }, {
            'command': 'pick',
            'args': [],
            'code': r'''
v("This may take a while.")
s = escape(h.pick(pb=mk_pb()))
pb_nl()
sow(api.u("honeypot.pick?'{0}'\n").format(s))
'''
        }, {
            'command': 'add',
            'args': [{
                'type': 'str',
                'name': 'value'
            }],
            'code': r'''
try:
    int(args['value'])          # Check if it will be treated as an integer.
    sow("#WARNING: ITS VALUE WILL BE BELIEVED TO BE AN INDEX!\n")
    sow("#IF YOU REMOVE IT BY ITS NAME, BAD THINGS CAN HAPPEN!\n")
except ValueError:
    pass
try:
    h.add(args['value'])
except api.err_duplicate:
    err("duplicate")
'''
        }, {
            'command': 'pickl',
            'args': [{
                'type': 'int',
                'name': 'n'
            }],
            'code': r'''
try:
    the_list = h.pickl(args['n'], False, pb=mk_pb())
except api.err_idiot:
    err("Argument is too big.")
pb_nl()
tmp_list = []
for x in the_list:
    tmp_list.append(escape(x))
sow(api.u("honeypot.pickl?'{0}'\n#DONE\n").format(
                                            api.u("', '").join(tmp_list)))
'''
        }, {
            'command': 'pick',
            'args': [
                {
                    'type': 'int',
                    'name': 'n'
                }, {
                    'type': 'str',
                    'name': 'sep'
            }],
            'code': r'''
try:
    #3rd arg, make it raise instead of log.
    tmp_str = h.pick(args['n'], args['sep'], False, pb=mk_pb())
except api.err_idiot:
    err("n is too big")
pb_nl()
sow(api.u("honeypot.pick?'{0}'\n").format(api.u(escape(tmp_str))))
'''
        }, {
            'command': 'remove',
            'args': [{
                'type': 'str',
                'name': 'name'
            }],
            'code': r'''
try:
    h.remove(args['name'])
except api.err_notfound:
    err('not found')
'''
    }])

def main():
    """main() - main loop."""
    global p
    global h
    global theline
    sow(copywrong)
    while True:
        v("READY")  #Show this message after every command, if verbose.
                    #It should be moved to line 666.
        temporary_variable = siw()
        if len(temporary_variable) < 1: #Not even an empty line.
            quit()
        theline = temporary_variable[:-1]       #Get rid of newline.
        if len(theline) < 1:
            continue
        if theline[0] == "#":           #Comment.
            continue
        if theline[0] == "|":           #Pipe through.
            sow(theline[1:])
            sow("\n")
            continue
        parse(theline, [
            {
                'command': 'exit',
                'args': [],
                'code': 'quit()'
            }, {
                'command': 'help',
                'args': [],
                'code': 'show_help()'
            }, {
                'command': 'bells',
                'args': [],
                'code': 'bells_and_whistles()'
            }, {
                'command': 'whistles',
                'args': [],
                'code': 'bells_and_whistles()'
            }, {
                'command': 'undo',
                'args': [],
                'code': '''
if interactive:
    try:
        api.undo(p, h)
    except:
        err("cannot undo")
    v("Undone something.")
else:
    err("Not in interactive mode.")
'''
            }, {
                'command': 'redo',
                'args': [],
                'code': '''
if interactive:
    try:
        api.redo(p, h)
    except:
        err("cannot redo")
    v("Redone something.")
else:
    err("Not in interactive mode.")
'''
            }, {
                'command': 'bugs',
                'args': [],
                'code': 'bugs()'
            },  {
                'command': 'hell',
                'args': [],
                'code': '''
global verbose
verbose = True
v('Verbose mode enabled.')
'''
            }, {
                'command': 'passwd',
                'args': [{
                    'type': 'lit_str',
                    'name': 'cmd'
                }],
                'code': 'passwd_cmds(args["cmd"])'
            }, {
                'command': 'honeypot',
                'args': [{
                    'type': 'lit_str',
                    'name': 'cmd'
                }],
                'code': 'honeypot_cmds(args["cmd"])'
            }, {
                'command': 'verbose',
                'args': [{
                    'type': 'str',
                    'name': 'mode'
                }],
                'code': '''
global verbose
if 'on' in args['mode']:
    verbose = True
    v('Verbose mode enabled.')
elif 'off' in args['mode']:
    verbose = False
else:
    se()
'''
            }, {
                'command': 'pb',
                'args': [{
                    'type': 'str',
                    'name': 'mode'
                }],
                'code': '''
global progress_bars
if 'on' in args['mode']:
    progress_bars = True
elif 'off' in args['mode']:
    progress_bars = False
else:
    se()
'''
    }])
        #

# Initialization.
p = api.passwd()
h = api.honeypot()
verbose = False
progress_bars = False
interactive = False
theline = ""
logging.basicConfig(level=logging.CRITICAL)     #STFU
if __name__ == "__main__":
    try:
        o, a = getopt.getopt(sys.argv[1:], "iB", ["interactive",
            "single-backup"])
    except getopt.GetoptError as err:
        sys.stderr.write("{0}\n".format(err))
        sys.exit(1)
    if len(a) > 0:
        infile = open(a[0], "r")
    else:
        infile = sys.stdin
    for x, y in o:
        if x in ("-i", "--interactive"):
            interactive = True
        if x in ("-B", "--single-backup"):
            del p
            del h
            shutil.copy(os.path.expanduser("~/.passwdman/passwords"),
                os.path.join(os.path.expanduser("~/.passwdman/undoable"),
                "passwords" + '-' + time.ctime()))
            time.sleep(1)
            shutil.copy(os.path.expanduser("~/.passwdman/honeypots"),
                os.path.join(os.path.expanduser("~/.passwdman/undoable"),
                "honeypots" + '-' + time.ctime()))
            p = api.passwd(False)
            h = api.honeypot(False)
    try:
        main()
    except KeyboardInterrupt: #^C
        quit()
    except SystemExit:
        raise
    except:
        print("\n!!#AAARGH!   I'M DYING A PAINFUL DEATH!   AAARGH!")
        try:
            raise
        except UnicodeEncodeError as x:
            try:
                bad = unicodedata.name(x.object[x.start:x.end])
            except ValueError:
                bad = 'CHARACTER THAT DOES NOT EXIST'
            print('I broke my fingers attempting to write a {0}'.format(bad))
            print('Use a better encoding.')
            traceback.print_exc()
            sys.exit(1)
        except UnicodeDecodeError as x:
            print('I broke my eyes attempting to read a {0}'.format(
                                        x.object[x.start:x.end].__repr__()))
            print('Use a better encoding.')
            traceback.print_exc()
            sys.exit(1)
        except:
            raise