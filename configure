#!/bin/sh
#NOTE This file is auto-generated by the python-script "configure.2", which
#is auto-generated by this file.
#Copyright (c) 2013, Oskar Skog
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions are met:
#
#1.  Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
#2.  Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#POSSIBILITY OF SUCH DAMAGE.
#important checks
pyck="0"        #no python
for test_dir in `echo $PATH | tr : ' '`; do
    for x in `ls $test_dir | grep python`; do
        if [ -n x ]; then
            pyck="1" #python
            break 2
        fi
    done
done
if [ $pyck -eq 0 ]; then
    echo Python is required.
    exit 1
fi
#create dirsinstall
echo '#!/bin/sh' > dirsinstall
echo 'while [ $# -gt 0 ]; do' >> dirsinstall
echo '    if [ -d $1 ]; then' >> dirsinstall
echo '        shift' >> dirsinstall
echo '        continue' >> dirsinstall
echo '    fi' >> dirsinstall
echo '    mkdir $1' >> dirsinstall
echo '    shift' >> dirsinstall
echo 'done' >> dirsinstall
chmod +x dirsinstall
for test_dir in `echo $PATH | tr : " "`; do
    for test_file in `ls $test_dir | grep ^python`; do
        if [ -x $test_dir/$testfile ] ; then
            python_exec=$test_dir/$test_file
            break 2
        fi
    done
done
#create shebang script
echo '#!/bin/sh' > shebang
echo 'for test_dir in `echo $PATH | tr : " "`; do' >> shebang
echo '    for test_file in `ls $test_dir | grep ^python`; do' >> shebang
echo '        if [ -x $test_dir/$testfile ] ; then' >> shebang
echo '            python_exec=$test_dir/$test_file' >> shebang
echo '            break 2' >> shebang
echo '        fi' >> shebang
echo '    done' >> shebang
echo 'done' >> shebang
echo 'while [ $# -gt 0 ]; do' >> shebang
echo '    echo "#!$python_exec" > $1.out' >> shebang
echo '    cat $1 >> $1.out' >> shebang
echo '    shift' >> shebang
echo 'done' >> shebang
#create configure.2             python-script
if [ -z $python_exec ]; then
    echo "#!/usr/bin/false" > configure.2
else
    echo "#!${python_exec}" > configure.2
fi
printf '#!/usr/bin/python\n' >> configure.2
printf '#second stage of configure\n' >> configure.2
printf '#This file is human generated, but hidden in \047configure\047, which is\n' >> configure.2
printf '#auto-generated by this file.\n' >> configure.2
printf '#special options\n' >> configure.2
printf '#       --halt          stop, so that \047configure.2\047 (I) can be read.\n' >> configure.2
printf '#       --update=x      create a new \047configure\047 that hides and extracts x\n' >> configure.2
printf '\n' >> configure.2
printf 'copywrong = \042\042\042Copyright (c) 2013, Oskar Skog\n' >> configure.2
printf 'All rights reserved.\n' >> configure.2
printf '\n' >> configure.2
printf 'Redistribution and use in source and binary forms, with or without\n' >> configure.2
printf 'modification, are permitted provided that the following conditions are met:\n' >> configure.2
printf '\n' >> configure.2
printf '1.  Redistributions of source code must retain the above copyright notice,\n' >> configure.2
printf '    this list of conditions and the following disclaimer.\n' >> configure.2
printf '\n' >> configure.2
printf '2.  Redistributions in binary form must reproduce the above copyright notice,\n' >> configure.2
printf '    this list of conditions and the following disclaimer in the documentation\n' >> configure.2
printf '    and/or other materials provided with the distribution.\n' >> configure.2
printf '\n' >> configure.2
printf 'THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \042AS IS\042\n' >> configure.2
printf 'AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n' >> configure.2
printf 'IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n' >> configure.2
printf 'ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n' >> configure.2
printf 'LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n' >> configure.2
printf 'CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n' >> configure.2
printf 'SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n' >> configure.2
printf 'INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n' >> configure.2
printf 'CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n' >> configure.2
printf 'ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n' >> configure.2
printf 'POSSIBILITY OF SUCH DAMAGE.\042\042\042\n' >> configure.2
printf 'import getopt\n' >> configure.2
printf 'import sys\n' >> configure.2
printf 'import os\n' >> configure.2
printf 'def v(x):\n' >> configure.2
printf '    if verbose:\n' >> configure.2
printf '        print(x)\n' >> configure.2
printf 'def usage():\n' >> configure.2
printf '    \042\042\042Options\n' >> configure.2
printf '  long options; only for variables in the makefile\n' >> configure.2
printf '    --prefix    --exec_prefix   --bindir        --datarootdir   --datadir\n' >> configure.2
printf '    --docdir    --infodir       --htmldir       --dvidir        --pdfdir\n' >> configure.2
printf '    --psdir     --localedir     --mandir\n' >> configure.2
printf '    --man1dir           --man3dir       --man5dir\n' >> configure.2
printf '    --man1ext           --man3ext       --man5ext\n' >> configure.2
printf '  long and short pairs\n' >> configure.2
printf '    --moduledir -m      Where to install the API\n' >> configure.2
printf '    --help      -h      All of this.\n' >> configure.2
printf '    --verbose   -v\n' >> configure.2
printf '    --nocli     -c      No text-mode user interface\n' >> configure.2
printf '    --nogui     -g\n' >> configure.2
printf '    --noguidoc  -d      No documentation for the graphical user interface\n' >> configure.2
printf '    --notechdoc -t      No technical documentation (API and file formats)\n' >> configure.2
printf '  and finally\n' >> configure.2
printf '    --halt              stop so that configure.2 can be read\n' >> configure.2
printf '    --update            argument: filename\042\042\042\n' >> configure.2
printf '    print(usage.__doc__)\n' >> configure.2
printf '####\n' >> configure.2
printf '#####\n' >> configure.2
printf '######\n' >> configure.2
printf '#####\n' >> configure.2
printf '####\n' >> configure.2
printf 'def unvar(thevar, thelist):\n' >> configure.2
printf '    chunks, out = [], \042\042\n' >> configure.2
printf '    for x in thelist: #get the value\n' >> configure.2
printf '        if x[\042name\042] == thevar:\n' >> configure.2
printf '            var = x[\042value\042]\n' >> configure.2
printf '            break\n' >> configure.2
printf '    else:\n' >> configure.2
printf '        raise ValueError\n' >> configure.2
printf '    while True:\n' >> configure.2
printf '        x = var.split(\042\044\042, 1)   #break at the first place\n' >> configure.2
printf '        chunks.append(x[0])     #the non-variable part\n' >> configure.2
printf '        if len(x) < 2:\n' >> configure.2
printf '            break\n' >> configure.2
printf '        if x[1][0] == \042(\042:      #is it a variable\n' >> configure.2
printf '            y = x[1][1:].split(\042)\042, 1)  #break at the second place\n' >> configure.2
printf '            if len(y) < 2:\n' >> configure.2
printf '                chunks.append(\042\044(\042 + y) #Oops\n' >> configure.2
printf '                break\n' >> configure.2
printf '            var = y[1]\n' >> configure.2
printf '            chunks.append(unvar(y[0], thelist)) #recursive (the variable)\n' >> configure.2
printf '            continue\n' >> configure.2
printf '        else:\n' >> configure.2
printf '            var = \042\044\042 + x[1]    #Oops\n' >> configure.2
printf '            continue\n' >> configure.2
printf '    for x in chunks:    #put the chunks together in a string.\n' >> configure.2
printf '        out += x\n' >> configure.2
printf '    return out\n' >> configure.2
printf '####\n' >> configure.2
printf '#####\n' >> configure.2
printf '######\n' >> configure.2
printf '#####\n' >> configure.2
printf '####\n' >> configure.2
printf 'def update(x):\n' >> configure.2
printf '    #Load the python script x, that will be the new me.\n' >> configure.2
printf '    #Store it in configure\n' >> configure.2
printf '    configure = open(\042configure\042, \042w\042)\n' >> configure.2
printf '    configure.write(\042\042\042#!/bin/sh\n' >> configure.2
printf '#NOTE This file is auto-generated by the python-script \042configure.2\042, which\n' >> configure.2
printf '#is auto-generated by this file.\n' >> configure.2
printf '#Copyright (c) 2013, Oskar Skog\n' >> configure.2
printf '#All rights reserved.\n' >> configure.2
printf '#\n' >> configure.2
printf '#Redistribution and use in source and binary forms, with or without\n' >> configure.2
printf '#modification, are permitted provided that the following conditions are met:\n' >> configure.2
printf '#\n' >> configure.2
printf '#1.  Redistributions of source code must retain the above copyright notice,\n' >> configure.2
printf '#    this list of conditions and the following disclaimer.\n' >> configure.2
printf '#\n' >> configure.2
printf '#2.  Redistributions in binary form must reproduce the above copyright notice,\n' >> configure.2
printf '#    this list of conditions and the following disclaimer in the documentation\n' >> configure.2
printf '#    and/or other materials provided with the distribution.\n' >> configure.2
printf '#\n' >> configure.2
printf '#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \042AS IS\042\n' >> configure.2
printf '#AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n' >> configure.2
printf '#IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n' >> configure.2
printf '#ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n' >> configure.2
printf '#LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n' >> configure.2
printf '#CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n' >> configure.2
printf '#SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n' >> configure.2
printf '#INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n' >> configure.2
printf '#CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n' >> configure.2
printf '#ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n' >> configure.2
printf '#POSSIBILITY OF SUCH DAMAGE.\n' >> configure.2
printf '#important checks\n' >> configure.2
printf 'pyck=\0420\042        #no python\n' >> configure.2
printf 'for test_dir in `echo \044PATH | tr : \047 \047`; do\n' >> configure.2
printf '    for x in `ls \044test_dir | grep python`; do\n' >> configure.2
printf '        if [ -n x ]; then\n' >> configure.2
printf '            pyck=\0421\042 #python\n' >> configure.2
printf '            break 2\n' >> configure.2
printf '        fi\n' >> configure.2
printf '    done\n' >> configure.2
printf 'done\n' >> configure.2
printf 'if [ \044pyck -eq 0 ]; then\n' >> configure.2
printf '    echo Python is required.\n' >> configure.2
printf '    exit 1\n' >> configure.2
printf 'fi\n' >> configure.2
printf '#create dirsinstall\n' >> configure.2
printf 'echo \047#!/bin/sh\047 > dirsinstall\n' >> configure.2
printf 'echo \047while [ \044# -gt 0 ]; do\047 >> dirsinstall\n' >> configure.2
printf 'echo \047    if [ -d \0441 ]; then\047 >> dirsinstall\n' >> configure.2
printf 'echo \047        shift\047 >> dirsinstall\n' >> configure.2
printf 'echo \047        continue\047 >> dirsinstall\n' >> configure.2
printf 'echo \047    fi\047 >> dirsinstall\n' >> configure.2
printf 'echo \047    mkdir \0441\047 >> dirsinstall\n' >> configure.2
printf 'echo \047    shift\047 >> dirsinstall\n' >> configure.2
printf 'echo \047done\047 >> dirsinstall\n' >> configure.2
printf 'chmod +x dirsinstall\n' >> configure.2
printf 'for test_dir in `echo \044PATH | tr : \042 \042`; do\n' >> configure.2
printf '    for test_file in `ls \044test_dir | grep ^python`; do\n' >> configure.2
printf '        if [ -x \044test_dir/\044testfile ] ; then\n' >> configure.2
printf '            python_exec=\044test_dir/\044test_file\n' >> configure.2
printf '            break 2\n' >> configure.2
printf '        fi\n' >> configure.2
printf '    done\n' >> configure.2
printf 'done\n' >> configure.2
printf '#create shebang script\n' >> configure.2
printf 'echo \047#!/bin/sh\047 > shebang\n' >> configure.2
printf 'echo \047for test_dir in `echo \044PATH | tr : \042 \042`; do\047 >> shebang\n' >> configure.2
printf 'echo \047    for test_file in `ls \044test_dir | grep ^python`; do\047 >> shebang\n' >> configure.2
printf 'echo \047        if [ -x \044test_dir/\044testfile ] ; then\047 >> shebang\n' >> configure.2
printf 'echo \047            python_exec=\044test_dir/\044test_file\047 >> shebang\n' >> configure.2
printf 'echo \047            break 2\047 >> shebang\n' >> configure.2
printf 'echo \047        fi\047 >> shebang\n' >> configure.2
printf 'echo \047    done\047 >> shebang\n' >> configure.2
printf 'echo \047done\047 >> shebang\n' >> configure.2
printf 'echo \047while [ \044# -gt 0 ]; do\047 >> shebang\n' >> configure.2
printf 'echo \047    echo \042#!\044python_exec\042 > \0441.out\047 >> shebang\n' >> configure.2
printf 'echo \047    cat \0441 >> \0441.out\047 >> shebang\n' >> configure.2
printf 'echo \047    shift\047 >> shebang\n' >> configure.2
printf 'echo \047done\047 >> shebang\n' >> configure.2
printf '#create configure.2             python-script\n' >> configure.2
printf 'if [ -z \044python_exec ]; then\n' >> configure.2
printf '    echo \042#!/usr/bin/false\042 > configure.2\n' >> configure.2
printf 'else\n' >> configure.2
printf '    echo \042#!\044{python_exec}\042 > configure.2\n' >> configure.2
printf 'fi\n' >> configure.2
printf '\042\042\042)\n' >> configure.2
printf '    #auto generate configure.2\n' >> configure.2
printf '    me = open(x, \042r\042)\n' >> configure.2
printf '    for l in me:\n' >> configure.2
printf '        #printf it\n' >> configure.2
printf '        l2, i = \042\042, 0\n' >> configure.2
printf '        while i < len(l[:-1]):\n' >> configure.2
printf '            if l[i] == \042\044\042:\n' >> configure.2
printf '                l2 += \042\\\\044\042\n' >> configure.2
printf '            elif l[i] == \042\047\042:\n' >> configure.2
printf '                l2 += \042\\\\047\042\n' >> configure.2
printf '            elif l[i] == \047\042\047:\n' >> configure.2
printf '                l2 += \042\\\\042\042\n' >> configure.2
printf '            elif l[i] == \042\\\\\042:\n' >> configure.2
printf '                l2 += \042\\\\\\\\\042\n' >> configure.2
printf '            else:\n' >> configure.2
printf '                l2 += l[i]\n' >> configure.2
printf '            i += 1\n' >> configure.2
printf '        configure.write(\042printf \047{}\\\\n\047 >> configure.2\\n\042.format(l2))\n' >> configure.2
printf '    #done\n' >> configure.2
printf '    configure.write(\042\042\042chmod +x configure.2\n' >> configure.2
printf 'echo \042Beginning stage 2...\042\n' >> configure.2
printf 'exec ./configure.2 \044*\n' >> configure.2
printf '\042\042\042)\n' >> configure.2
printf '    configure.close()\n' >> configure.2
printf '    return\n' >> configure.2
printf '####\n' >> configure.2
printf '#####\n' >> configure.2
printf '######\n' >> configure.2
printf '#####\n' >> configure.2
printf '####\n' >> configure.2
printf '\n' >> configure.2
printf 'def main():\n' >> configure.2
printf '    global dirs_set\n' >> configure.2
printf '    global moduledir\n' >> configure.2
printf '    global verbose\n' >> configure.2
printf '    global cli\n' >> configure.2
printf '    global gui\n' >> configure.2
printf '    global guidoc\n' >> configure.2
printf '    global techdoc\n' >> configure.2
printf '    long_opts = []\n' >> configure.2
printf '    for x in dirs_def[1:]:      #skip \047PKGNAME\047\n' >> configure.2
printf '        long_opts.append(x[\042name\042] + \042=\042)\n' >> configure.2
printf '    long_opts.append(\042help\042)\n' >> configure.2
printf '    long_opts.append(\042verbose\042)\n' >> configure.2
printf '    long_opts.append(\042moduledir=\042)\n' >> configure.2
printf '    long_opts.append(\042nocli\042)\n' >> configure.2
printf '    long_opts.append(\042nogui\042)\n' >> configure.2
printf '    long_opts.append(\042noguidoc\042)\n' >> configure.2
printf '    long_opts.append(\042notechdoc\042)\n' >> configure.2
printf '    long_opts.append(\042halt\042)\n' >> configure.2
printf '    long_opts.append(\042update=\042)\n' >> configure.2
printf '    long_opts.append(\042version\042)\n' >> configure.2
printf '    ####\n' >> configure.2
printf '    #####\n' >> configure.2
printf '    ######\n' >> configure.2
printf '    #####\n' >> configure.2
printf '    ####\n' >> configure.2
printf '    #handle the options\n' >> configure.2
printf '    try:\n' >> configure.2
printf '        opts, args = getopt.getopt(sys.argv[1:], \042hvm:cgdtu:HV\042, long_opts)\n' >> configure.2
printf '    except getopt.GetoptError as err:\n' >> configure.2
printf '        sys.stderr.write(\042{}\\n\042.format(err))\n' >> configure.2
printf '        sys.exit(1)\n' >> configure.2
printf '    del args\n' >> configure.2
printf '    for o, a in opts:\n' >> configure.2
printf '        if o in (\042--help\042, \042-h\042):\n' >> configure.2
printf '            usage()\n' >> configure.2
printf '            sys.exit(0)\n' >> configure.2
printf '        elif o in (\042--verbose\042, \042-v\042):\n' >> configure.2
printf '            verbose = True\n' >> configure.2
printf '            continue\n' >> configure.2
printf '        elif o in (\042--moduledir\042, \042-m\042):#ex. /usr/lib/python2.7/dist-packages\n' >> configure.2
printf '            moduledir = a\n' >> configure.2
printf '            continue\n' >> configure.2
printf '        elif o in (\042--nocli\042, \042-c\042):\n' >> configure.2
printf '            cli = False\n' >> configure.2
printf '            continue\n' >> configure.2
printf '        elif o in (\042--nogui\042, \042-g\042):\n' >> configure.2
printf '            gui = False\n' >> configure.2
printf '            continue\n' >> configure.2
printf '        elif o in (\042--noguidoc\042, \042-d\042):\n' >> configure.2
printf '            guidoc = False\n' >> configure.2
printf '            continue\n' >> configure.2
printf '        elif o in (\042--notechdoc\042, \042-t\042):\n' >> configure.2
printf '            techdoc = False\n' >> configure.2
printf '            continue\n' >> configure.2
printf '        elif o in (\042--halt\042, \042-H\042):\n' >> configure.2
printf '            while True:\n' >> configure.2
printf '                continue\n' >> configure.2
printf '        elif o in (\042--update\042, \042-u\042):\n' >> configure.2
printf '            update(a)\n' >> configure.2
printf '            sys.exit(0)\n' >> configure.2
printf '        elif o in (\042--version\042, \042-V\042):\n' >> configure.2
printf '            print(\042passwdman configure version {}\042.format(VERSION))\n' >> configure.2
printf '            sys.exit(0)\n' >> configure.2
printf '        else:       #handle options for the variable names\n' >> configure.2
printf '            for c in dirs_def:      #look for a match\n' >> configure.2
printf '                if (\042--\042 + c[\042name\042]) == o:\n' >> configure.2
printf '                    #no duplicates\n' >> configure.2
printf '                    i = 0       #index\n' >> configure.2
printf '                    for x in dirs_set:\n' >> configure.2
printf '                        if x[\042name\042] == c[\042name\042]:\n' >> configure.2
printf '                            dirs_set.pop(i)\n' >> configure.2
printf '                            break\n' >> configure.2
printf '                        else:\n' >> configure.2
printf '                            i += 1\n' >> configure.2
printf '                    if len(a) > 0:  #empty argument resets\n' >> configure.2
printf '                        dirs_set.append({\042name\042: c[\042name\042], \042value\042: a})\n' >> configure.2
printf '                    break\n' >> configure.2
printf '            else:\n' >> configure.2
printf '                assert False, \042unhandled option\042\n' >> configure.2
printf '####\n' >> configure.2
printf '#####\n' >> configure.2
printf '######\n' >> configure.2
printf '#####\n' >> configure.2
printf '####\n' >> configure.2
printf 'def dirs():\n' >> configure.2
printf '    def tryset(x):      #always check\n' >> configure.2
printf '        for y in dirs_set:\n' >> configure.2
printf '            if y[\042name\042] == x:\n' >> configure.2
printf '                return False\n' >> configure.2
printf '        else:\n' >> configure.2
printf '            return True\n' >> configure.2
printf '    def setvar(x, y):\n' >> configure.2
printf '        global dirs_auto\n' >> configure.2
printf '        dirs_auto.append({\042name\042: x, \042value\042: y})\n' >> configure.2
printf '    global dirs_final\n' >> configure.2
printf '    global dirs_auto\n' >> configure.2
printf '    #check some variables\n' >> configure.2
printf '    if tryset(\042prefix\042):\n' >> configure.2
printf '        try:\n' >> configure.2
printf '            setvar(\042prefix\042, sys.prefix)\n' >> configure.2
printf '        except:\n' >> configure.2
printf '            pass\n' >> configure.2
printf '    if tryset(\042exec_prefix\042):\n' >> configure.2
printf '        try:\n' >> configure.2
printf '            setvar(\042exec_prefix\042, sys.exec_prefix)\n' >> configure.2
printf '        except:\n' >> configure.2
printf '            pass\n' >> configure.2
printf '    #TODO more\n' >> configure.2
printf '    dirs_final.extend(dirs_set)\n' >> configure.2
printf '    dirs_final.extend(dirs_auto)\n' >> configure.2
printf '    for x in dirs_def:\n' >> configure.2
printf '        for y in dirs_final:\n' >> configure.2
printf '            if x[\042name\042] == y[\042name\042]:\n' >> configure.2
printf '                break\n' >> configure.2
printf '        else:\n' >> configure.2
printf '            dirs_final.append(x)\n' >> configure.2
printf '    \n' >> configure.2
printf '\n' >> configure.2
printf 'def getmoduledir():\n' >> configure.2
printf '    global moduledir\n' >> configure.2
printf '    #look for python* in \044(libdir) first, but if not found: du /\n' >> configure.2
printf '    if moduledir is None:   #It can be set by the user\n' >> configure.2
printf '        v(\042Figuring out the \047moduledir\047 variable...\042)\n' >> configure.2
printf '        path = unvar(\042libdir\042, dirs_final)\n' >> configure.2
printf '        dirlist = os.listdir(path)\n' >> configure.2
printf '        for x in dirlist:\n' >> configure.2
printf '            if \042python\042 in x:       #is it the python modules directory\n' >> configure.2
printf '                try:\n' >> configure.2
printf '                    dirlist2 = os.listdir(os.path.join(path, x))\n' >> configure.2
printf '                    for y in dirlist2:\n' >> configure.2
printf '                        if y in (\042dist-packages\042, \042site-packages\042):\n' >> configure.2
printf '                            #the right subdirectory\n' >> configure.2
printf '                            moduledir = os.path.join(path, x, y)\n' >> configure.2
printf '                            break\n' >> configure.2
printf '                    if moduledir is not None:\n' >> configure.2
printf '                        break\n' >> configure.2
printf '                except:\n' >> configure.2
printf '                    pass            #names for some non-directories...\n' >> configure.2
printf '                if moduledir is not None:         #...contains \042python\042\n' >> configure.2
printf '                    break\n' >> configure.2
printf '        else: #du /\n' >> configure.2
printf '            v(\042Damn. I need to look through \047/\047\042)\n' >> configure.2
printf '            for dirname, subdirs, files in os.walk(\042/\042):\n' >> configure.2
printf '                v(dirname)\n' >> configure.2
printf '                if \042python\042 in dirname and (\042dist-packages\042 in subdirs or\n' >> configure.2
printf '                    \042site-packages\042 in subdirs):\n' >> configure.2
printf '                    #found\n' >> configure.2
printf '                    if \042dist-packages\042 in subdirs:\n' >> configure.2
printf '                        moduledir = os.path.join(dirname, \042dist-packages\042)\n' >> configure.2
printf '                    else:\n' >> configure.2
printf '                        moduledir = os.path.join(dirname, \042site-packages\042)\n' >> configure.2
printf '                    break\n' >> configure.2
printf '            else:\n' >> configure.2
printf '                sys.stderr.write(\042ERROR: set --moduledir manually\\n\042)\n' >> configure.2
printf '                sys.exit(1)\n' >> configure.2
printf '####\n' >> configure.2
printf '#####\n' >> configure.2
printf '######\n' >> configure.2
printf '#####\n' >> configure.2
printf '####\n' >> configure.2
printf 'def makemakefile():\n' >> configure.2
printf '    global gui\n' >> configure.2
printf '    global guidoc\n' >> configure.2
printf '    global cli\n' >> configure.2
printf '    global techdoc\n' >> configure.2
printf '    global makefile\n' >> configure.2
printf '    if gui:         #some checks\n' >> configure.2
printf '        try:\n' >> configure.2
printf '            from gi.repository import Gtk\n' >> configure.2
printf '        except:\n' >> configure.2
printf '            sys.stderr.write(\n' >> configure.2
printf '                \042ERROR: cannot import \047Gtk\047 from \047gi.repository\047\\n\042)\n' >> configure.2
printf '            sys.stderr.write(\n' >> configure.2
printf '                \042ERROR: cannot install graphical user-interface.\\n\042)\n' >> configure.2
printf '            print(\042Press control-C to stop installation.\\n\042)\n' >> configure.2
printf '            gui = False\n' >> configure.2
printf '    if not gui:\n' >> configure.2
printf '        guidoc = False    #The things said in the GUI\047s documentation is also\n' >> configure.2
printf '                          #said everywhere else.\n' >> configure.2
printf '    ####    ###     ###   BEGIN GENERATING Makefile       ###     ###     ###\n' >> configure.2
printf '    #       cli\n' >> configure.2
printf '    #       gui\n' >> configure.2
printf '    #       guidoc\n' >> configure.2
printf '    #       techdoc\n' >> configure.2
printf '    #They define the \047all\047 target\n' >> configure.2
printf '    v(\042Writing the Makefile...\042)\n' >> configure.2
printf '    try:\n' >> configure.2
printf '        makefile = open(\042Makefile\042, \042w\042)    #truncate\n' >> configure.2
printf '    except:\n' >> configure.2
printf '        sys.stderr.write(\042ERROR: cannot open \047Makefile\047\\n\042)\n' >> configure.2
printf '        sys.exit(1)\n' >> configure.2
printf '    makefile.write(\042#This file is auto-generated by configure.2\\n\042)\n' >> configure.2
printf '    v(\042Setting the variables...\042)\n' >> configure.2
printf '    for x in dirs_final:\n' >> configure.2
printf '        makefile.write(\042{} = {}\\n\042.format(x[\042name\042], x[\042value\042]))\n' >> configure.2
printf '    makefile.write(\042moduledir = {}\\n\042.format(moduledir))\n' >> configure.2
printf '    ##add the \047FORCE\047 target\n' >> configure.2
printf '    #makefile.write(\042FORCE :\\n\042)\n' >> configure.2
printf '    \n' >> configure.2
printf 'def maketarget_all():\n' >> configure.2
printf '    global gui\n' >> configure.2
printf '    global guidoc\n' >> configure.2
printf '    global cli\n' >> configure.2
printf '    global techdoc\n' >> configure.2
printf '    global makefile\n' >> configure.2
printf '    v(\042Writing the \047all.made\047 and \047all\047 targets...\042)\n' >> configure.2
printf '    makefile.write(\042all.made : shebang \044(srcdir)passwdmanapi.py\042)\n' >> configure.2
printf '    #append more dependencies\n' >> configure.2
printf '    if techdoc:\n' >> configure.2
printf '        makefile.write(\042 \044(srcdir)passwdmanapi.3 \044(srcdir)passwdmanfiles.5\042)\n' >> configure.2
printf '    if cli:\n' >> configure.2
printf '        makefile.write(\042 \044(srcdir)passwdmancli\042)\n' >> configure.2
printf '        makefile.write(\042 \044(srcdir)passwdmancli.py \044(srcdir)passwdmancli.1\042)\n' >> configure.2
printf '    if gui:\n' >> configure.2
printf '        makefile.write(\042 \044(srcdir)passwdmangui\042)\n' >> configure.2
printf '    if guidoc:\n' >> configure.2
printf '        makefile.write(\042 \044(srcdir)passwdmangui.1\042)\n' >> configure.2
printf '    makefile.write(\042\\n\\t./shebang\042)\n' >> configure.2
printf '    if cli:\n' >> configure.2
printf '        makefile.write(\042 \044(srcdir)passwdmancli.py\042)\n' >> configure.2
printf '    if gui:\n' >> configure.2
printf '        makefile.write(\042 \044(srcdir)passwdmangui\042)\n' >> configure.2
printf '    makefile.write(\042\\n\\ttouch all.made\\n\042)    #make all, made all, all.made\n' >> configure.2
printf '    makefile.write(\042all : all.made\\n\042)          #the all target\n' >> configure.2
printf '\n' >> configure.2
printf 'def maketarget_install():\n' >> configure.2
printf '    def install_file(src, dst, x):\n' >> configure.2
printf '        global installed_files\n' >> configure.2
printf '        makefile.write(\042\\tcp \044(srcdir){} \044(DESTDIR){}\\n\042.format(src, dst))\n' >> configure.2
printf '        makefile.write(\042\\tchown root:root \044(DESTDIR){}\\n\042.format(dst))\n' >> configure.2
printf '        if x:\n' >> configure.2
printf '            makefile.write(\042\\tchmod 755 \044(DESTDIR){}\\n\042.format(dst))\n' >> configure.2
printf '        else:\n' >> configure.2
printf '            makefile.write(\042\\tchmod 644 \044(DESTDIR){}\\n\042.format(dst))\n' >> configure.2
printf '        installed_files.append(dst)\n' >> configure.2
printf '    global gui\n' >> configure.2
printf '    global guidoc\n' >> configure.2
printf '    global cli\n' >> configure.2
printf '    global techdoc\n' >> configure.2
printf '    global makefile\n' >> configure.2
printf '    v(\042Writing the \047install\047 target...\042)\n' >> configure.2
printf '    makefile.write(\042install : all.made\042)\n' >> configure.2
printf '    #append more dependencies\n' >> configure.2
printf '    if cli:\n' >> configure.2
printf '        makefile.write(\042 passwdmancli.py.out\042)#./shebang adds a \047.out\047 suffix\n' >> configure.2
printf '    if gui:\n' >> configure.2
printf '        makefile.write(\042 passwdmangui.out\042)\n' >> configure.2
printf '    makefile.write(\042\\n\042)\n' >> configure.2
printf '    install_file(\042passwdmanapi.py\042, \042\044(moduledir)/passwdmanapi.py\042, False)\n' >> configure.2
printf '    if techdoc:\n' >> configure.2
printf '        install_file(\042passwdmanapi.3\042, \042\044(man3dir)/passwdmanapi\044(man3ext)\042,\n' >> configure.2
printf '                False)\n' >> configure.2
printf '        install_file(\042passwdmanfiles.5\042,\042\044(man5dir)/passwdmanfiles\044(man5ext)\042,\n' >> configure.2
printf '                False)\n' >> configure.2
printf '    if cli:\n' >> configure.2
printf '        install_file(\042passwdmancli\042, \042\044(bindir)/passwdmancli\042, True)\n' >> configure.2
printf '        install_file(\042passwdmancli.py.out\042, \042\044(bindir)/passwdmancli.py\042, True)\n' >> configure.2
printf '        #BUG \047passwdmancli.py\047 should be installed in libexec\n' >> configure.2
printf '        install_file(\042passwdmancli.1\042, \042\044(man1dir)/passwdmancli\044(man1ext)\042,\n' >> configure.2
printf '                False)\n' >> configure.2
printf '    if gui:\n' >> configure.2
printf '        install_file(\042passwdmangui.out\042, \042\044(bindir)/passwdmangui\042, True)\n' >> configure.2
printf '    if guidoc:\n' >> configure.2
printf '        install_file(\042passwdmangui.1\042, \042\044(man1dir)/passwdmangui\044(man1ext)\042,\n' >> configure.2
printf '                False)\n' >> configure.2
printf '\n' >> configure.2
printf 'def maketarget_uninstall():\n' >> configure.2
printf '    global makefile\n' >> configure.2
printf '    v(\042Writing the \047uninstall\047 target...\042)\n' >> configure.2
printf '    makefile.write(\042uninstall :\\n\042)\n' >> configure.2
printf '    for x in installed_files:\n' >> configure.2
printf '        makefile.write(\042\\t-rm \044(DESTDIR){}\\n\042.format(x))\n' >> configure.2
printf '\n' >> configure.2
printf 'def maketarget__doc_(x):\n' >> configure.2
printf '    global gui\n' >> configure.2
printf '    global guidoc\n' >> configure.2
printf '    global cli\n' >> configure.2
printf '    global techdoc\n' >> configure.2
printf '    global makefile\n' >> configure.2
printf '    v(\042Writing the \047install-{0}\047 and \047{0}\047 targets...\042.format(x))\n' >> configure.2
printf '    makefile.write(\042install-{0} : {0}\\n{0} :\\n\042.format(x))\n' >> configure.2
printf '    if guidoc:\n' >> configure.2
printf '        makefile.write(\042\\t-cp \044(srcdir)passwdmangui.{}\042.format(x))\n' >> configure.2
printf '        makefile.write(\042 \044(DESTDIR)\044({0}dir)/passwdmangui.{0}\\n\042.format(x))\n' >> configure.2
printf '    if cli:\n' >> configure.2
printf '        makefile.write(\042\\t-cp \044(srcdir)passwdmancli.{}\042.format(x))\n' >> configure.2
printf '        makefile.write(\042 \044(DESTDIR)\044({0}dir)/passwdmancli.{0}\\n\042.format(x))\n' >> configure.2
printf '    if techdoc:\n' >> configure.2
printf '        makefile.write(\042\\t-cp \044(srcdir)passwdmanapi.{}\042.format(x))\n' >> configure.2
printf '        makefile.write(\042 \044(DESTDIR)\044({0}dir)/passwdmanapi.{0}\\n\042.format(x))\n' >> configure.2
printf '        makefile.write(\042\\t-cp \044(srcdir)passwdmanfiles.{}\042.format(x))\n' >> configure.2
printf '        makefile.write(\042 \044(DESTDIR)\044({0}dir)/passwdmanfiles.{0}\\n\042.format(x))\n' >> configure.2
printf '\n' >> configure.2
printf 'def maketarget_clean():\n' >> configure.2
printf '    v(\042Writing the \047clean\047 target...\042)\n' >> configure.2
printf '    makefile.write(\042clean :\\n\042)\n' >> configure.2
printf '    makefile.write(\042\\t-rm all.made *.out configure.2\\n\\t-rm xml.copyright\\n\042)\n' >> configure.2
printf '    \n' >> configure.2
printf 'def maketarget_dist():\n' >> configure.2
printf '    global makefile\n' >> configure.2
printf '    v(\042Writing the \047dist\047 target...\042)\n' >> configure.2
printf '    #ignore cli, gui, guidoc, and techdoc\n' >> configure.2
printf '    makefile.write(\042dist :\042)\n' >> configure.2
printf '    for x in (\042api.py\042, \042api.xml\042, \042cli\042, \042cli.py\042, \042cli.xml\042, \042gui\042,\n' >> configure.2
printf '        \042gui.xml\042, \042files.xml\042, \042cli.html\042, \042gui.html\042, \042api.html\042,\n' >> configure.2
printf '        \042files.html\042):          #html and xml depends on the manpages\n' >> configure.2
printf '        makefile.write(\042 \044(srcdir)passwdman{}\042.format(x))\n' >> configure.2
printf '    makefile.write(\042\\n\\t-rm -r passwdman-{0}\\n\\tmkdir passwdman-{0}\\n\042.format(\n' >> configure.2
printf '                                                                    VERSION))\n' >> configure.2
printf '    #the same x\n' >> configure.2
printf '    for x in (\042api.py\042, \042api.3\042, \042cli\042, \042cli.py\042, \042cli.1\042, \042gui\042, \042gui.1\042,\n' >> configure.2
printf '        \042files.5\042):\n' >> configure.2
printf '        makefile.write(\042\\tcp \044(srcdir)passwdman{} passwdman-{}\\n\042.format(x,\n' >> configure.2
printf '                                                                VERSION))\n' >> configure.2
printf '    for f in (\042html\042, \042ps\042, \042div\042, \042pdf\042):\n' >> configure.2
printf '        for n in (\042api\042, \042gui\042, \042cli\042, \042files\042):\n' >> configure.2
printf '            makefile.write(\n' >> configure.2
printf '                \042\\t-cp \044(srcdir)passwdman{}.{} passwdman-{}\\n\042.format(n, f,\n' >> configure.2
printf '                                                                VERSION))\n' >> configure.2
printf '    for x in (\042cli\042, \042api\042, \042gui\042, \042files\042):\n' >> configure.2
printf '        makefile.write(\042\\tcp \044(srcdir)passwdman{}.xml passwdman-{}\\n\042.format(x,\n' >> configure.2
printf '                                                                VERSION))\n' >> configure.2
printf '    for x in (\042README\042, \042LICENSE\042, \042INSTALL\042, \042NEWS\042, \042TODO\042, \042ChangeLog\042,\n' >> configure.2
printf '                \042CREDITS\042, \042configure\042):\n' >> configure.2
printf '        makefile.write(\042\\tcp \044(srcdir){} passwdman-{}\\n\042.format(x, VERSION))\n' >> configure.2
printf '    makefile.write(\042\\ttar -cf passwdman-{0}.tar passwdman-{0}\042\n' >> configure.2
printf '                        \042 \\n\\tgzip passwdman-{0}.tar\\n\042.format(VERSION))\n' >> configure.2
printf '\n' >> configure.2
printf 'def maketarget_installdirs():\n' >> configure.2
printf '    global makefile\n' >> configure.2
printf '    makefile.write(\042installdirs : dirsinstall\\n\\t./dirsinstall\042)\n' >> configure.2
printf '    for x in dirs_final:\n' >> configure.2
printf '        if \042man\042 in x[\042name\042] and \042ext\042 in x[\042name\042]:\n' >> configure.2
printf '            continue\n' >> configure.2
printf '        if x[\042name\042] in (\042srcdir\042, \042DESTDIR\042):\n' >> configure.2
printf '            continue\n' >> configure.2
printf '        makefile.write(\042 \044(DESTDIR)\044({})\042.format(x[\042name\042]))\n' >> configure.2
printf '    makefile.write(\042\\n\042)\n' >> configure.2
printf '\n' >> configure.2
printf 'def maketarget__doc_auto():\n' >> configure.2
printf '    #It is for me\n' >> configure.2
printf '    #I make things in the current directory\n' >> configure.2
printf '    global makefile\n' >> configure.2
printf '    f = open(\042xml.copyright\042, \042w\042)\n' >> configure.2
printf '    f.write(\042\042\042<!-- Copyright (c) 2013, Oskar Skog\n' >> configure.2
printf 'All rights reserved. -->\n' >> configure.2
printf '\n' >> configure.2
printf '<!-- Redistribution and use in source and binary forms, with or without\n' >> configure.2
printf 'modification, are permitted provided that the following conditions are met: -->\n' >> configure.2
printf '\n' >> configure.2
printf '<!-- 1.  Redistributions of source code must retain the above copyright notice,\n' >> configure.2
printf 'this list of conditions and the following disclaimer. -->\n' >> configure.2
printf '\n' >> configure.2
printf '<!-- 2.  Redistributions in binary form must reproduce the above copyright notice,\n' >> configure.2
printf 'this list of conditions and the following disclaimer in the documentation\n' >> configure.2
printf 'and/or other materials provided with the distribution. -->\n' >> configure.2
printf '\n' >> configure.2
printf '<!-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \042AS IS\042\n' >> configure.2
printf 'AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n' >> configure.2
printf 'IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n' >> configure.2
printf 'ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n' >> configure.2
printf 'LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n' >> configure.2
printf 'CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n' >> configure.2
printf 'SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n' >> configure.2
printf 'INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n' >> configure.2
printf 'CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n' >> configure.2
printf 'ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n' >> configure.2
printf 'POSSIBILITY OF SUCH DAMAGE. -->\n' >> configure.2
printf '\042\042\042)\n' >> configure.2
printf '    f.close()\n' >> configure.2
printf '    for n, s in ((\042passwdmangui\042, 1), (\042passwdmanfiles\042, 5),\n' >> configure.2
printf '                 (\042passwdmancli\042, 1), (\042passwdmanapi\042, 3)):\n' >> configure.2
printf '        makefile.write(\042{0}.xml : {0}.{1}\\n\042.format(n , str(s)))\n' >> configure.2
printf '        makefile.write(\042\\tdoclifter {0}.{1}\\n\042.format(n, str(s)))\n' >> configure.2
printf '        makefile.write(\042\\tmv {0}.{1}.xml {0}.xml\\n\042.format(n, str(s)))\n' >> configure.2
printf '        makefile.write(\042{0}.html : {0}.{1}\\n\042.format(n, str(s)))\n' >> configure.2
printf '        makefile.write(\042\\tgroff -Txhtml -mandoc {0}.{1} |\042.format(n, str(s)))\n' >> configure.2
printf '        makefile.write(\042 cat xml.copyright - > {0}.html\\n\042.format(n, str(s)))\n' >> configure.2
printf '        \n' >> configure.2
printf '\n' >> configure.2
printf '#all the long options and the defaults for variables in Makefile\n' >> configure.2
printf 'dirs_def= [ {\042name\042: \042PKGNAME\042, \042value\042: \042passwdman\042},\n' >> configure.2
printf '        {\042name\042: \042prefix\042, \042value\042: \042/usr/local\042},\n' >> configure.2
printf '        {\042name\042: \042exec_prefix\042, \042value\042: \042\044(prefix)\042},\n' >> configure.2
printf '        {\042name\042: \042bindir\042, \042value\042: \042\044(exec_prefix)/bin\042},\n' >> configure.2
printf '        {\042name\042: \042datarootdir\042, \042value\042: \042\044(prefix)/share\042},\n' >> configure.2
printf '        {\042name\042: \042datadir\042, \042value\042: \042\044(datarootdir)\042},\n' >> configure.2
printf '        {\042name\042: \042docdir\042, \042value\042: \042\044(datarootdir)/doc/\044(PKGNAME)\042},\n' >> configure.2
printf '        {\042name\042: \042infodir\042, \042value\042: \042\044(datarootdir)/info\042},\n' >> configure.2
printf '        {\042name\042: \042htmldir\042, \042value\042: \042\044(docdir)\042},\n' >> configure.2
printf '        {\042name\042: \042dvidir\042, \042value\042: \042\044(docdir)\042},\n' >> configure.2
printf '        {\042name\042: \042pdfdir\042, \042value\042: \042\044(docdir)\042},\n' >> configure.2
printf '        {\042name\042: \042psdir\042, \042value\042: \042\044(docdir)\042},\n' >> configure.2
printf '        {\042name\042: \042localedir\042, \042value\042: \042\044(datarootdir)/locale\042},\n' >> configure.2
printf '        {\042name\042: \042mandir\042, \042value\042: \042\044(datarootdir)/man\042},\n' >> configure.2
printf '        {\042name\042: \042man1dir\042, \042value\042: \042\044(mandir)/man1\042},\n' >> configure.2
printf '        {\042name\042: \042man3dir\042, \042value\042: \042\044(mandir)/man3\042},\n' >> configure.2
printf '        {\042name\042: \042man5dir\042, \042value\042: \042\044(mandir)/man5\042},\n' >> configure.2
printf '        {\042name\042: \042man1ext\042, \042value\042: \042.1\042},\n' >> configure.2
printf '        {\042name\042: \042man3ext\042, \042value\042: \042.3\042},\n' >> configure.2
printf '        {\042name\042: \042man5ext\042, \042value\042: \042.5\042},\n' >> configure.2
printf '        {\042name\042: \042libdir\042, \042value\042: \042\044(exec_prefix)/lib\042},\n' >> configure.2
printf '        {\042name\042: \042srcdir\042, \042value\042: \042\042},\n' >> configure.2
printf '        {\042name\042: \042DESTDIR\042, \042value\042: \042\042}]\n' >> configure.2
printf 'cli = gui = guidoc = techdoc = True     #these 4 booleans will be used when\n' >> configure.2
printf '                                        #generating Makefile\n' >> configure.2
printf 'verbose = False\n' >> configure.2
printf 'moduledir = None        #handle it later, it takes a long time to du /\n' >> configure.2
printf 'dirs_set = []           #manually set directories\n' >> configure.2
printf 'dirs_final = []         #The directory variables to use\n' >> configure.2
printf 'dirs_auto = []\n' >> configure.2
printf 'installed_files = []    #filled in by maketarget_install and used by\n' >> configure.2
printf '                        #maketarget_uninstall\n' >> configure.2
printf 'makefile = None         #make it global\n' >> configure.2
printf 'VERSION = \0420.0.14\042\n' >> configure.2
printf 'MAIL = \042\042\n' >> configure.2
printf 'if __name__ == \042__main__\042:\n' >> configure.2
printf '    main()\n' >> configure.2
printf '    dirs()\n' >> configure.2
printf '    getmoduledir()\n' >> configure.2
printf '    makemakefile()\n' >> configure.2
printf '    maketarget_all()\n' >> configure.2
printf '    maketarget_install()\n' >> configure.2
printf '    maketarget_uninstall()\n' >> configure.2
printf '    maketarget__doc_(\042html\042)\n' >> configure.2
printf '    maketarget__doc_(\042pdf\042)\n' >> configure.2
printf '    maketarget__doc_(\042ps\042)\n' >> configure.2
printf '    maketarget__doc_(\042dvi\042)\n' >> configure.2
printf '    maketarget_clean()\n' >> configure.2
printf '    maketarget_dist()\n' >> configure.2
printf '    maketarget_installdirs()\n' >> configure.2
printf '    maketarget__doc_auto()\n' >> configure.2
printf '    makefile.close()\n' >> configure.2
printf '    #must end with empty line!\n' >> configure.2
printf '   \n' >> configure.2
chmod +x configure.2
echo "Beginning stage 2..."
exec ./configure.2 $*
