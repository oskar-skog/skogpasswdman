.\"Copyright (c) 2013, 2014, Oskar Skog <oskar.skog.finland@gmail.com>
.\"All rights reserved.
.\"
.\"Redistribution and use in source and binary forms, with or without
.\"modification, are permitted provided that the following conditions are met:
.\"
.\"1.  Redistributions of source code must retain the above copyright notice,
.\"    this list of conditions and the following disclaimer.
.\"
.\"2.  Redistributions in binary form must reproduce the above copyright notice,
.\"    this list of conditions and the following disclaimer in the documentation
.\"    and/or other materials provided with the distribution.
.\"
.\"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
.\"AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\"IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\"ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
.\"LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\"CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\"SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\"INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\"CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\"ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\"POSSIBILITY OF SUCH DAMAGE.
.Dd Jan 19, 2014
.Dt PASSWDMANAPI 3
.Os
.Sh NAME
.Nm passwdmanapi
.Nd library used by passwdmancli and passwdmangui
.\"     ###     Synposis                        ###
.Sh SYNOPSIS
.Fd #!/usr/bin/python
.Fd import passwdmanapi
.Pp
.Fd is_anystr(x)
.Fd is_bytestr(x)
.Fd is_int(x)
.Fd is_num(x)
.Fd is_unicodestr(x)
.Fd u(x)
.Fd b(x)
.Fd b2u3(x)
.\"     ###     ...                             ###
.Fd open_rng()
.Fd get64(length, pb=None)
.Fd get10(length, pb=None)
.Fd getint(a, b, pb=None)
.Fd unquote(x)
.Fd randomize(method, minlength, maxlength, pb=None)
.Fd undo(passwdobj=None, honeypotobj=None)
.Fd redo(passwdobj=None, honeypotobj=None)
.Fd no_pb()
.Fd no_pb_f(percent, data)
.\"     ###     Classes                         ###
.Fd class progress_bar()
.Fd class common_data()
.Fd class passwd(common_data)
.Fd class honeypot(common_data)
.\"     ###     progress_bar                    ###
.Ss class progress_bar():
.Fd __init__(self, start, stop, function, data=None)
.Fd progress(self, percent)
.Fd minibar(self, start, stop)
.\"     ###     common_data                     ###
.Ss class common_data():
.Fd __init__(self, xmlfile)
.Fd __iter__(self)
.Fd __next__(self)
.Fd next(self)
.Fd __getitem__(self, i)
.Fd __len__(self)
.Fd remove(self, x, xmlfile, element_name, attrib_name, is_numstring=False)
.Fd writexml(self, xmlfile, pb=None)
.Fd __del__(self)
.\"     ###     passwd                          ###
.Ss passwd(common_data):
.Fd __init__(self, backups=True)
.Fd add(self, name, value, m_type, m_minlength, m_maxlength, pb=None)
.Fd add_nometa(self, name, value)
.Fd remove(self, x, is_numstring=False)
.Fd __repr__(self)
.Fd mkindex(self, x, is_numstring=False)
.Fd update(self, index, pb=None)
.Fd update_meta(self, index, m_type, m_minlength, m_maxlength, pb=None)
.\"     ###     honeypot                        ###
.Ss class honeypot(common_data):
.Fd __init__(self, backups=True)
.Fd add(self, value)
.Fd remove(self, x, is_numstring=False)
.Fd pick(self, n=1, sep=",", log_vs_raise=True, pb=None)
.Fd pickl(self, n, log_vs_raise=True, pb=None)
.Fd pickf(self, n, **arg)
.Fd __repr__(self)
.\"     ###     Exceptions                      ###
.Ss Exceptions
.Fd class err_norandom(Exception)
.Fd class err_nolength(Exception)
.Fd class err_loaderr(Exception)
.Fd class err_notfound(Exception)
.Fd class err_duplicate(Exception)
.Fd class err_idiot(Exception)
.Fd class err_nometa(Exception)
.\"     ###     Description                     ###
.Sh DESCRIPTION
Unless otherwise noted,
.Va xmlfile
is a path.
.Pp
.Va pb
is either
.Dv None
or a
.Dv progress_bar
object.
.\"     ###     is_anystr                       ###
.Fn is_anystr
returns True if
.Va x
is any kind of string, and False if
.Va x
is not.
.Pp
.\"     ###     is_bytestr                      ###
.Fn is_bytestr
returns True if
.Va x
is an encoded string/bytes, and False if
.Va x
is not.
.Pp
.\"     ###     is_int                          ###
.Fn is_int
returns True if
.Va x
is an integer, and False if
.Va x
is not.
.Pp
.\"     ###     is_num                          ###
.Fn is_num
returns True if
.Va x
is an integer or a float, and False if
.Va x
is not.
.Pp
.\"     ###     is_unicodestr                   ###
.Fn is_unicodestr
returns True if
.Va x
is a decoded string/unicode, and False if
.Va x
is not.
.Pp
.\"     ###     u                               ###
.Fn u
returns
.Va x
as a unicode/decoded string.
.Pp
.\"     ###     b                               ###
.Fn b
returns
.Va x
as a byte/encoded string.
.Pp
.\"     ###     b2u3                            ###
.Fn b2u3
is the same as
.Fn b
if the Python version is 2.x.
.Pp
.Fn b2u3
is the same as
.Fn u
if the Python version is 3.x.
.Pp
.\"     ###     open_rng                        ###
.Fn open_rng
opens
.Xr random 4
(or
.Xr urandom 4 ,
if random could not be opened).
Returns a file open for reading binary.
Raises
.Er err_norandom .
.Pp
.\"     ###     get10, get64                    ###
.Fn get10
and
.Fn get64
returns a random string of
.Va length
letters.
.Fn get10
returns digits.
.Fn get64
returns digits, big letters, small letters, underscores and exclamation
marks.
Raises
.Er err_norandom
and
.Er err_nolength .
.Pp
.\"     ###     getint                          ###
.Fn getint
returns a random integer >=
.Va a ,
<=
.Va b .
Raises
.Er err_norandom
and
.Er err_nolength .
.Pp
.\"     ###     unquote                         ###
.Fn unquote
returns the string
.Va x
without its surrounding quotes.
If the string is not surrounded be quotes, the string will be returned
unchanged.
.Pp
.\"     ###     randomize                       ###
.Fn randomize
returns a random string with a length >=
.Va minlength
and <=
.Va maxlength .
If
.Va method
is
.Qq 10
.Fn randomize
will use
.Fn get10 .
If
.Va method
is
.Qq 64
.Fn randomize
will use
.Fn get64 .
.Pp
.\"     ###     undo                            ###
.Fn undo
undoes the latest change to the password list or honey pot list, by restoring
from the newest auto-generated backup.
It requires
.Va passwdobj
which is the
.Fn passwd
object and
.Va honeypotobj
which is the
.Fn honeypot
object.
Raises
.Er err_idiot .
.Pp
.\"     ###     redo                            ###
.Fn redo
redoes the latest undone change to the password list or honey pot list, by
restoring from the newest auto-generated backup from
.Fn undo .
Raises
.Er err_idiot .
.Pp
.\"     ###     no_pb, no_pb_f                  ###
.Fn no_pb
returns a No-op
.Dv progress_bar
object (which calls
.Fn no_pb_f
instead of a function that would actually do something).
.Pp
.Fn no_pb_f
does nothing.
.Pp
.\"     ###     Classes                         ###
.Fn common_data
is a class defining methods used by both
.Fn passwd
and
.Fn honeypot .
.Pp
.Fn passwd
is a class for the password list.
.Fn honeypot
is a class for the honey-pot list.
See
.Sx FILES .
.\"     ###     progress_bar                    ###
.Ss class progress_bar():
The class
.Fn progress_bar
is a class for simple interface-independent progress-bars.
The keyword-argument
.Va pb
accepts a
.Dv progress_bar
object.
Only these functions have a
.Va pb
argument:
.Bl -bullet
.It
.Fn randomize
.It
.Fn getint
.It
.Fn get10
.It
.Fn get64
.It
.Fn common_data.writexml
.It
.Fn passwd.add
.It
.Fn passwd.update
.It
.Fn passwd.update_meta
.It
.Fn honeypot.pick
.It
.Fn honeypot.pickl
.El
.Pp
.Fn no_pb
is a useful function.
.Pp
.\"     ###     progress_bar.__init__           ###
.Fn progress_bar.__init__
creates a
.Dv progress_bar
object.
.Va start
and
.Va stop
are floats in the range 0...100.
.Va function
is a function that will update the progress-bar.
It takes exactly two arguments.
The first is the percentage and the other is
.Va data
which defaults to
.Dv None .
.Bd -literal
#
custom_function(percent, data)
#
.Ed
.Pp
.Va percent
is a float in the range 0...100 and
.Va data
is all other necessary data.
.Pp
.\"     ###     progress_bar.progress           ###
.Fn progress
updates the progress-bar.
.Pp
.\"     ###     progress_bar.minibar            ###
.Fn minibar
creates a new
.Dv progress_bar
with identical
.Va function
and
.Va data .
.Va start
is where in the parent object the child's 0% is and
.Va stop
is where in the parent object the child's 100% is.
.\"     ###     common_data                     ###
.Ss class common_data():
.Fn __init__
will load the data from
.Va xmlfile .
Raises
.Er err_loaderr .
.Pp
.Fn __iter__
resets the index and returns
.Va self .
.Fn __getitem__
returns the password/honeypot at
.Va i .
.Fn __len__
returns the number of passwords/honeypots.
.Pp
.\"     ###     common_data.remove              ###
.Fn remove
removes the password/honeypot at
.Va x ,
which can be an integer or a stringed integer or the value of the
password/honeypot, from the datastructure
.Va self
and the file
.Va xmlfile .
.Va element_name
and
.Va attrib_name
tells it what elements in the XML file and attributes it should loop through,
remove and find a match for
.Va x
in.
Set
.Va is_numstring
to True if
.Va x
is a string containing digits.
If you don't set it, then
.Va x
will be treated as an index.
Raises
.Er err_notfound .
.Pp
.\"     ###     common_data.writexml            ###
.Fn writexml
writes the datastructure
.Va self
to the file
.Va xmlfile .
It creates a backup of
.Va xmlfile
to
.Pa ~/.passwdman/undoable .
.\"     ###     passwd                          ###
.Ss class passwd(common_data)
.Fn passwd
loads its data from the XML
.Pa ~/.passwdman/passwords .
.Pp
.Va self[index]["name"]
is the name/purpose of the password.
.Va self[index]["value"]
is the value of the password.
.Va self[index]["meta"]["minlength"]
is the minimal length required for the password.
.Va self[index]["meta"]["maxlength"]
is the maximal length allowed for the password.
.Va self[index]["meta"]["type"]
is the type of the password, which is one of:
.Bl -diag
.It "10"
The password uses digits.
.It "64"
The password uses big letters, small letters, digits, underscores and
exclamation marks.
.It "human"
The password is human generated.
.El
.Pp
If a password has no meta-data in
.Pa ~/.passwdman/passwords ,
its
.Va minlength
and
.Va maxlength
will be zero, and its
.Va type
will be
.Qq human .
.Pp
Set
.Va backups
to False in
.Fn __init__
if you do not want
.Fn passwd
to make any change undoable (as in can be undone not impossible).
.Pp
.\"     ###     passwd.add, passwd.add_nometa   ###
.Fn passwd.add
and
.Fn passwd.add_nometa
adds a password for
.Va name
with the value
.Va value .
.Fn add_nometa
adds a password without real meta-data while
.Fn add
requires meta-data (the
.Va m_type
must be a string and
.Va m_minlength
and
.Va m_maxlength
can be either an integer or a stringed integer).
.Fn add
allows
.Va value
to be
.Dv None
which will make it randomize a value automatically.
Raises
.Er err_duplicate .
.Pp
.\"     ###     passwd.remove                   ###
.Fn passwd.remove
removes the password
.Va x .
.Va x
can be either a string matching a password's name or an integer (index) or a
stringed integer.
Set
.Va is_numstring
to True if
.Va x
is a string containing digits.
If you don't set it, then
.Va x
will be treated as an index.
Raises
.Er err_notfound .
.Pp
.\"     ###     passwd.mkindex                  ###
.Fn passwd.mkindex
find
.Va x
and return an index.
.Va x
can be either a string matching a password's name or a stringed integer
(index).
Set
.Va is_numstring
to True if
.Va x
is a string containing digits.
If you don't set it, then
.Va x
will be treated as an index.
Raises
.Er err_notfound .
.Pp
.\"     ###     passwd.update, passwd.update_meta ###
.Fn passwd.update
and
.Fn passwd.update_meta
updates the password at
.Va index
automatically by generating a password of the right type and an acceptable
length.
.Fn update
uses the password's own meta-data while
.Fn update_meta
gives the password new meta-data from
.Va m_type ,
.Va m_minlength
and
.Va m_maxlength .
.Va m_type
must be a string,
.Va m_minlength
and
.Va m_maxlength
can be either an integer or a stringed integer.
Raises
.Er err_notfound ,
.Er err_idiot
and
.Er err_nometa .
.\"     ###     honeypot                        ###
.Ss class honeypot(common_data)
The honey pots are weak passwords supposed to only be used as traps.
.Fn honeypot
loads its data from the XML
.Pa ~/.passwdman/honeypots .
.Va self[index]
is the value of the honeypot.
.Pp
Set
.Va backups
to False in
.Fn __init__
if you do not want
.Fn passwd
to make any change undoable (as in can be undone not impossible).
.Pp
.\"     ###     honeypot.add                    ###
.Fn honeypot.add
adds a new honeypot with the value
.Va value .
Raises
.Er err_duplicate .
.Pp
.\"     ###     honeypot.remove                 ###
.Fn honeypot.remove
removes the honeypot
.Va x .
.Va x
is either an index (integer) or a stringed integer or the value of the
honeypot.
Set
.Va is_numstring
to True if
.Va x
is a string containing digits.
If you don't set it, then
.Va x
will be treated as an index.
Raises
.Er err_notfound .
.Pp
.\"     ###     honeypot.pick (OLD)             ###
.Fn honeypot.pick
IS DEPRECATED AND WILL BE REMOVED 2015-01-01.
.Fn honeypot.pick
picks
.Va n
random honeypots and returns a string of
honeypots separated with
.Va sep .
If
.Va log_vs_raise
is true, it will log an error if
.Va n
is too big.
If
.Va log_vs_raise
is false, it will raise
.Er err_idiot .
.Pp
.\"     ###     honeypot.pickl                  ###
.Fn honeypot.pickl
picks
.Va n
random honeypots and returns a list of honeypots.
If
.Va log_vs_raise
is true, it will log an error if
.Va n
is too big.
If
.Va log_vs_raise
is false, it will raise
.Er err_idiot .
.Pp
.\"     ###     honeypot.pickf                  ###
.Fn honeypot.pickf
picks
.Va n
random honeypots and returns a string.
Arguments:
.Bl -tag
.It "n"
Required.
.It "pb"
Default is None.
The progress bar.
.It "pattern"
Default is single quote.
.Qq (['])
.It "replacement"
Default is to backslash-escape.
.It "sep"
Default is single-quote---comma---single-quote.
.Qq ', '
.It "head"
Default is single quote.
.It "tail"
Default is single quote.
.It "log_vs_raise"
Default is True.
.El
The string is prepended with
.Va head
and appended with
.Va tail .
The honeypots are escaped with the regular expressions
.Va pattern
and
.Va replacement ,
and separated with
.Va sep .
If
.Va log_vs_raise
is True then
.Fn honeypot.pickf
will log an error if
.Va n
is too big.
It will pick fewer fake-passwords than it is supposed to.
If
.Va log_vs_raise
is False it will raise
.Er err_idiot .
.\"     ###     Exceptions, err_norandom        ###
.Sh Exceptions
.Er err_norandom
is raised when neither
.Xr random 4
or
.Xr urandom 4
can be opened.
.Bl -bullet
.It
.Fn open_rng
.It
.Fn get10
.It
.Fn get64
.It
.Fn getint
.It
.Fn randomize
.It
.Fn passwd.add
.It
.Fn passwd.update
.It
.Fn passwd.update_meta
.It
.Fn honeypot.pick
.It
.Fn honeypot.pickl
.It
.Fn honeypot.pickf
.El
.Pp
.\"     ###     err_nolength                    ###
.Er err_nolength
is raised when a function is called with an invalid length.
.Bl -bullet
.It
.Fn get64
.It
.Fn get10
.It
.Fn getint
.El
.Pp
.\"     ###     err_loaderr                     ###
.Er err_loaderr
is raised if data cannot be loaded from file.
.Bl -bullet
.It
.Fn common_data
.It
.Fn passwd
.It
.Fn honeypot
.El
.Pp
.\"     ###     err_notfound                    ###
.Er err_notfound
is raised if index is out of range or if it cannot find a match.
.Bl -bullet
.It
.Fn common_data.remove
.It
.Fn passwd.remove
.It
.Fn passwd.mkindex
.It
.Fn passwd.update
.It
.Fn passwd.update_meta
.It
.Fn honeypot.remove
.El
.Pp
.\"     ###     err_duplicate                   ###
.Er err_duplicate
is raised if it is attempted to add a password with the same name as another
or if its is attempted to add a honeypot with the same value as another.
.Bl -bullet
.It
.Fn passwd.add
.It
.Fn passwd.add_nometa
.It
.Fn honeypot.add
.El
.Pp
.\"     ###     err_idiot                       ###
.Er err_idiot
is raised if the function was not used correctly.
.Bl -bullet
.It
.Fn passwd.update_meta
.It
.Fn honeypot.pick
.It
.Fn honeypot.pickl
.It
.Fn honeypot.pickf
.It
.Fn undo
.It
.Fn redo
.El
.Pp
.\"     ###     err_nometa                      ###
.Er err_nometa
is raised when meta-data is required, but the meta-data was nonexistent,
corrupt or no good.
.Bl -bullet
.It
.Fn randomize
.It
.Fn passwd.add
.It
.Fn passwd.update
.El
.\"     ###     Bugs                            ###
.Sh BUGS
.Bl -bullet
.It
Single-backup mode actually requires TWO undos.
.It
.Fn honeypot.pick
is deprecated and will be removed 2015-01-01.
A new
.Fn honeypot.pick
will appear in 2015-02-01.
.El
.\"     ###     Files                           ###
.Sh FILES
.Pa ~/.passwdman/passwords
is the XML file containing the passwords and their meta-data.
.Pp
.Pa ~/.passwdman/honeypots
is the XML file containing the honeypots.
.Pp
.Pa ~/.passwdman/undoable/
is where the auto-generated backups live.
.Pp
.Pa ~/.passwdman/redoable/
is where the backups generated by
.Fn undo
live.
.\"     ###     Examples                        ###
.Sh EXAMPLES
.Pa $(bindir)/passwdmangui
.Pp
.Pa $(bindir)/passwdmancli
.Pp
.Pa $(bindir)/passwdmanrli
.\"     ###     Author                          ###
.Sh AUTHOR
Written by
.An Oskar Skog Aq oskar.skog.finland@gmail.com .
.Pp
Please send patches, questions, bug reports and wish-lists.